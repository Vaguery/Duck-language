Still trying to work out the process of staging StackItems, negotiating among them, and so forth.


"1 + 8"
  []                              {}                              []                                  "1 + 8"
  []                              {}                              [IntegerItem.new(1)]                  "+ 8"
  []                              {int(1)}                        []                                    "+ 8"
  [int(1)]                        {}                              []                                    "+ 8"
  [int(1)]                        {}                              [MessageItem.new("+")]                  "8"
  [int(1)]                        {msg("+")}                      []                                      "8"
  []                              {}                              [ClosureItem.new(int(1).add(__),"abs")] "8"
  []                              {closure(int(1).add(__),"abs")} []                                      "8"
  [closure(1.add(__),"abs")]      {}                              []                                      "8"
  [closure(1.add(__),"abs")]      {}                              [IntegerItem.new(8)]                     ""
  [closure(1.add(__),"abs")]      {int(8)}                        []                                       ""
  []                              {}                              [IntegerItem.new(9)]                     ""
  []                              {int(9)}                        []                                       ""
  [int(9)]                        {}                              []                                       ""
  
closure(actor=1, method=add(__), needs="abs")
  integer 1 is acting
  method is "add"
  looking for one argument
  argument should respond to "abs"
  evaluates to result when found


"1 3 alike 7 2 + 9.1 map"
  [1]
  [1,3]
  [1]                                {closure(3.alike(__,__,__),"be")}
  [closure(3.alike(1,__,__),"++")]
  [closure(3.alike(1,__,__),"++")]   {7}
  []                                 {closure(3,alike(1,7,__),"++")}
  [closure(3,alike(1,7,__),"++")]    {}
  [closure(3,alike(1,7,__),"++")]    {2}
  []                                 {closure(3,alike(1,7,2),"++")}      
  []                                 {}                                  [bundle(1,7,2)]
  ...
  [bundle(1,7,2)]
  [bundle(1,7,2),msg("+")]
  [bundle(1,7,2),msg("+"),9.1]
  [bundle(1,7,2),msg("+"),9.1]       {msg("map")}
  [...]                              {closure(msg("+").map(__,__),"length")}
  [...]                              {closure(msg("+").map(bundle(1,7,2),__),"abs")}  [looking for something]


bundle(closure(1.add(__),"abs"),closure(7.add(__),"abs"),closure(2.add(__),"abs")) ??